<?php

use Hyperf\Context\ApplicationContext;
use Jot\HfElastic\Migration;
use Jot\HfElastic\Migration\Mapping;
use Jot\HfElastic\Migration\ElasticType\NestedType;
use Jot\HfElastic\Migration\ElasticType\ObjectType;

return new class(ApplicationContext::getContainer()) extends Migration {

    public const INDEX_NAME = '{{index}}';

    public function up(): void
    {
        $index = new Mapping(name: self::INDEX_NAME, dynamic: '{{dynamic}}');

{{contents}}
        $index->alias('{{index}}_identifier')->path('id');
        $index->defaults();

        $index->settings(
{{settings}}
        );

        $this->create($index);

    }

    public function down(): void
    {
        $this->delete(self::INDEX_NAME);
    }
};